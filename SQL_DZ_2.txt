SQL_DDL

DDL –Data Definition Language (DDL) (язык описания данных) это группа операторов определения данных. Другими словами создаем структуры баз данных 
-CREATE – используется для создания объектов базы данных;
-ALTER – используется для изменения объектов базы данных;
-DROP – используется для удаления объектов базы данных.


Первая часть.

Создание нового коннекта:  вилка+    postgreSQL    прописываем    
HOST (159.69.151.133) port (5056); database (qa_students_1) Username (user_23_91)    finish 
Добавляем sql editor (правой клавишей по названию базы)


Таблица employees

1.Создать таблицу employees
- id. serial,  primary key,
- employee_name. Varchar(50), not null

create table employees      (создание таблицы сотрудников)
 (пишутся названия столбцов и их параметры, чтобы параметр автоинкриминировался прописываем serial,
 primary key -  первичный ключ) employee_name Varchar(50 – кол-во символов в ячейке столбика)
 (тип данных) not null (чтобы в ячейке не было пустого поле  - not null

________________________
Создать таблицу employees
- id. serial,  primary key,
- employee_name. Varchar(50), not null
Наполнить таблицу employee 70 строками.


-- 1) Создаем таблицу
-- create table создаем таблицу ... название
-- чтобы значение автоинкрементировалось пишем serial , id всегда primary key - первичный ключ 
-- varchar тип данных (кол-во символов которое мб вставлено в ячейку этого столбика () )
-- чтобы не было пустого столбика not null

create table employees ( 
id serial primary key,
employee_name varchar (50) not null
);


--3) Создаем строки в таблице employees 
--default - в этот столбик знач. по умолч. serial 25+1=26 
-- Имя

insert into employees(id, employee_name)
values (default, 'Vasilisa')


--2)
select * from employees;


P.S. Добавление столбцов в табл.:
alter table employees106 
add column email varchar(50);
Получили в столбце данные null, чтобы их изменить: 
update employees106 set email = 'tolya@ya.ru'
where employee_name like 'Tolya';

--2.=============================================

Создать таблицу salary
- id. Serial  primary key,
- monthly_salary. Int, not null
Наполнить таблицу salary 15 строками:

create table salary (
id serial primary key,
monthly_salary varchar (30) not null
);


alter table salary
alter column monthly_salary type int
using monthly_salary::integer;

insert into salary (id, monthly_salary)
values (default, 2500)


select * from salary

--3.============================

--Создать таблицу employee_salary
--- id. Serial  primary key,
--- employee_id. Int, not null, unique
--- salary_id. Int, not null


create table employee_salary (
id serial primary key,
employee_id int not null unique,
salary_id int not null
);


select * from employee_salary;


--Наполнить таблицу salary 40 строками: - в 10 строк из 40 вставить несуществующие employee_id
--устанавливаем связи
insert into employee_salary (id, employee_id, salary_id)
values (default, 28, 13);

--если сделала ошибку заменяем неверный  employee_id на верный , в пункте id 26
update employee_salary set employee_id = 46
where id =37;

--4.======================
--Создать таблицу roles - id. Serial  primary key, - role_name. int, not null, unique

create table roles (
id serial primary key,
role_name int not null unique
);
 
select * from roles;

--Поменять тип столба role_name с int на varchar(30)
alter table roles
alter column role_name type varchar(30)
using role_name:: varchar

--Наполнить таблицу salary 20 строками:

insert into roles(id, role_name)
values (default, 'Senior Automation QA engineer')

--5.===================
-Создать таблицу roles_employee
- id. Serial  primary key,
- employee_id. Int, not null, unique (внешний ключ для таблицы employees, поле id)
- role_id. Int, not null (внешний ключ для таблицы roles, поле id)


create table roles_employee (
id Serial  primary key,
employee_id Int not null unique,
roles_id Int not null,
foreign key (employee_id)
references employees (id),
foreign key (roles_id)
references roles (id)
);

select * from roles_employee

--Наполнить таблицу roles_employee 40 строками:

insert into roles_employee (id, employee_id, roles_id)
values (default, 21, 2);






































